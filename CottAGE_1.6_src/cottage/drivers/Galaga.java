/*
CottAGE - the Arcade Generic Emulator in Java

Java driver by Erik Duijs
*/

/***************************************************************************

TODO:
- The starfield is taken from Galaxien. The Galaga one is probably different,
  unfortunately it is generated by a custom IC :-(


Galaga memory map (preliminary)

CPU #1:
0000-3fff ROM
CPU #2:
0000-1fff ROM
CPU #3:
0000-1fff ROM
ALL CPUS:
8000-83ff Video RAM
8400-87ff Color RAM
8b80-8bff sprite code/color
9380-93ff sprite position
9b80-9bff sprite control
8800-9fff RAM

read:
6800-6807 dip switches (only bits 0 and 1 are used - bit 0 is DSW1, bit 1 is DSW2)
	  dsw1:
	    bit 6-7 lives
	    bit 3-5 bonus
	    bit 0-2 coins per play
		  dsw2: (bootleg version, the original version is slightly different)
		    bit 7 cocktail/upright (1 = upright)
	    bit 6 ?
	    bit 5 RACK TEST
	    bit 4 pause (0 = paused, 1 = not paused)
	    bit 3 ?
	    bit 2 ?
	    bit 0-1 difficulty
7000-     custom IO chip return values
7100      custom IO chip status ($10 = command executed)

write:
6805      sound voice 1 waveform (nibble)
6811-6813 sound voice 1 frequency (nibble)
6815      sound voice 1 volume (nibble)
680a      sound voice 2 waveform (nibble)
6816-6818 sound voice 2 frequency (nibble)
681a      sound voice 2 volume (nibble)
680f      sound voice 3 waveform (nibble)
681b-681d sound voice 3 frequency (nibble)
681f      sound voice 3 volume (nibble)
6820      cpu #1 irq acknowledge/enable
6821      cpu #2 irq acknowledge/enable
6822      cpu #3 nmi acknowledge/enable
6823      if 0, halt CPU #2 and #3
6830      Watchdog reset?
7000-     custom IO chip parameters
7100      custom IO chip command (see machine/galaga.c for more details)
a000-a001 starfield scroll speed (only bit 0 is significant)
a002      starfield scroll direction (0 = backwards) (only bit 0 is significant)
a003-a004 starfield blink
a005      starfield enable
a007      flip screen

Interrupts:
CPU #1 IRQ mode 1
       NMI is triggered by the custom IO chip to signal the CPU to read/write
	       parameters
CPU #2 IRQ mode 1
CPU #3 NMI (@120Hz)

***************************************************************************/
package cottage.drivers;

import java.net.URL;

import jef.cpu.Cpu;
import jef.cpu.Z80;
import jef.cpuboard.CpuDriver;
import jef.machine.Machine;
import jef.machine.MachineDriver;
import jef.map.IOReadPort;
import jef.map.IOWritePort;
import jef.map.InputPort;
import jef.map.InterruptHandler;
import jef.map.MemoryReadAddress;
import jef.map.MemoryWriteAddress;
import jef.map.ReadHandler;
import jef.map.WriteHandler;
import jef.sound.SoundChipEmulator;
import jef.sound.chip.Namco;
import jef.video.Eof_callback;
import jef.video.GfxDecodeInfo;
import jef.video.GfxLayout;
import jef.video.GfxManager;
import jef.video.Vh_convert_color_proms;
import jef.video.Vh_refresh;
import jef.video.Vh_start;
import jef.video.Vh_stop;

import cottage.mame.MAMEDriver;

public class Galaga extends MAMEDriver {


	int[] REGION_CPU1	= new int[0x10000];
	int[] REGION_CPU2	= new int[0x10000];
	int[] REGION_CPU3	= new int[0x10000];
	int[] REGION_GFX1	= new int[0x1000];
	int[] REGION_GFX2	= new int[0x2000];
	int[] REGION_PROMS	= new int[0x320];
	int[] REGION_SOUND1	= new int[0x100];

	public Z80 cpu1 = new Z80();
	public Z80 cpu2 = new Z80();
	public Z80 cpu3 = new Z80();

	InputPort[] in = new InputPort[5];

	public ReadHandler		input_port_0_r;
	public ReadHandler		input_port_1_r;
	public ReadHandler		input_port_2_r;
	public ReadHandler		input_port_3_r;
	public ReadHandler		input_port_4_r;

	Namco	namco = new Namco ( REGION_CPU3,
								3,
								3072000/32,
								REGION_SOUND1 );

	cottage.vidhrdw.Galaga 		v								= new cottage.vidhrdw.Galaga();
	Eof_callback				noCallback						= (Eof_callback)v;
	Vh_refresh 					galaga_vh_screenrefresh 		= (Vh_refresh)v;
	Vh_start					galaga_vh_start					= (Vh_start)v;
	Vh_stop						generic_vh_stop					= (Vh_stop)v;
	Vh_convert_color_proms 		galaga_vh_convert_color_prom	= (Vh_convert_color_proms)v;

	cottage.machine.Galaga m					 = new cottage.machine.Galaga();
	InterruptHandler galaga_interrupt_1			 = m.galaga_interrupt_1();
	InterruptHandler galaga_interrupt_2			 = m.galaga_interrupt_2();
	InterruptHandler galaga_interrupt_3			 = m.galaga_interrupt_3();
	WriteHandler	 galaga_interrupt_enable_1_w = m.galaga_interrupt_enable_1_w();
	WriteHandler	 galaga_interrupt_enable_2_w = m.galaga_interrupt_enable_2_w();
	WriteHandler	 galaga_interrupt_enable_3_w = m.galaga_interrupt_enable_3_w();
	WriteHandler	 galaga_sharedram_w			 = m.galaga_sharedram_w();
	//WriteHandler 	 hiscore					 = m.hiscore(galaga_sharedram_w);
	WriteHandler	 galaga_customio_data_w		 = m.galaga_customio_data_w();
	WriteHandler	 galaga_customio_w			 = m.galaga_customio_w();
	WriteHandler	 galaga_halt_w				 = m.galaga_halt_w();
	WriteHandler	 pengo_sound_w				 = namco.pengo_sound_w(0x6800);
	ReadHandler		 galaga_sharedram_r			 = m.galaga_sharedram_r();
	ReadHandler		 galaga_dsw_r				 = m.galaga_dsw_r();
	ReadHandler		 galaga_customio_data_r		 = m.galaga_customio_data_r();
	ReadHandler		 galaga_customio_r			 = m.galaga_customio_r();


	public Machine getMachine(URL url, String name) {
		super.getMachine(url,name);
		super.setVideoEmulator(v);

		in[0] = new InputPort();
		in[1] = new InputPort();
		in[2] = new InputPort();
		in[3] = new InputPort();
		in[4] = new InputPort();

		input_port_0_r = (ReadHandler)in[0];
		input_port_1_r = (ReadHandler)in[1];
		input_port_2_r = (ReadHandler)in[2];
		input_port_3_r = (ReadHandler)in[3];
		input_port_4_r = (ReadHandler)in[4];


		if (name.equals("galaga")) {
			this.md = machine_driver_generic();
			GAME(1981, rom_galaga(), ipt_galaga(), v.galaga(), ROT90, "Namco", "Galaga (Namco)" );
		}

		m.setRefs(REGION_CPU1, this, v);
		v.setRefs(REGION_CPU1, REGION_PROMS);
		m.init(md);
		return (Machine)m;
	}


	public MachineDriver machine_driver_generic() {
		CpuDriver[] cpuDriver = new CpuDriver[3];

		cpuDriver[0] = new CpuDriver( (Cpu) cpu1,
										3125000,        /* 3.125 MHz */
										readmem_cpu1(), writemem_cpu1(), readport(), writeport(),
										galaga_interrupt_1, 1 );

		cpuDriver[1] = new CpuDriver( (Cpu) cpu2,
										3125000,        /* 3.125 MHz */
										readmem_cpu2(), writemem_cpu2(), readport(), writeport(),
										galaga_interrupt_2, 1 );

		cpuDriver[2] = new CpuDriver( (Cpu) cpu3,
										3125000,        /* 3.125 MHz */
										readmem_cpu3(), writemem_cpu3(), readport(), writeport(),
										galaga_interrupt_3, 2 );

		int[] visibleArea = { 0*8, 36*8-1, 0*8, 28*8-1 };

		SoundChipEmulator[] soundChip = new SoundChipEmulator[1];

		soundChip[0] = (SoundChipEmulator)namco;

		return new MachineDriver
		(
			cpuDriver,

			60, DEFAULT_60HZ_VBLANK_DURATION,
			99,	/* 99 CPU slices per frame - with 100, galagab2 hangs on coin insertion */
			NOP,

			//video;
			36*8, 28*8, visibleArea,
			gfxdecodeinfo(),
			32+64,64*4,     /* 32 for the characters, 64 for the stars */
			galaga_vh_convert_color_prom,

			VIDEO_TYPE_RASTER|GfxManager.VIDEO_SUPPORTS_DIRTY,

			noCallback,
			galaga_vh_start,
			generic_vh_stop,
			galaga_vh_screenrefresh,

			soundChip
			//noSound
		);
	}

	private MemoryReadAddress readmem_cpu1() {
		MemoryReadAddress mra = new MemoryReadAddress(REGION_CPU1);
		mra.set( 0x8000, 0x9fff, galaga_sharedram_r );
		mra.set( 0x6800, 0x6807, galaga_dsw_r );
		mra.set( 0x7000, 0x700f, galaga_customio_data_r );
		mra.set( 0x7100, 0x7100, galaga_customio_r );
		mra.setMR( 0x0000, 0x3fff, MRA_ROM );
		return mra;
	}

	private MemoryReadAddress readmem_cpu2() {
		MemoryReadAddress mra = new MemoryReadAddress(REGION_CPU2);
		mra.set( 0x8000, 0x9fff, galaga_sharedram_r );
		mra.set( 0x6800, 0x6807, galaga_dsw_r );
		mra.setMR( 0x0000, 0x1fff, MRA_ROM );
		return mra;
	}

	private MemoryReadAddress readmem_cpu3() {
		MemoryReadAddress mra = new MemoryReadAddress(REGION_CPU3);
		mra.set( 0x8000, 0x9fff, galaga_sharedram_r );
		
		mra.set( 0x6800, 0x6807, galaga_dsw_r );
		mra.setMR( 0x0000, 0x1fff, MRA_ROM );
		return mra;
	}

	private MemoryWriteAddress writemem_cpu1() {
		MemoryWriteAddress mwa = new MemoryWriteAddress(REGION_CPU1);
		mwa.set( 0x8000, 0x9fff, galaga_sharedram_w );
		//mwa.set( 0x83ed, 0x83f3, hiscore );
		
		mwa.setMW( 0x6830, 0x6830, MWA_NOP );
		mwa.set( 0x7000, 0x700f, galaga_customio_data_w );
		mwa.set( 0x7100, 0x7100, galaga_customio_w );
		mwa.setMW( 0xa000, 0xa005, MWA_RAM ); //,&galaga_starcontrol
		mwa.set( 0x6820, 0x6820, galaga_interrupt_enable_1_w );
		mwa.set( 0x6822, 0x6822, galaga_interrupt_enable_3_w );
		mwa.set( 0x6823, 0x6823, galaga_halt_w );
		//mwa.set( 0xa007, 0xa007, galaga_flipscreen_w );
		mwa.setMW( 0x0000, 0x3fff, MWA_ROM );
		return mwa;
	}

	private MemoryWriteAddress writemem_cpu2() {
		MemoryWriteAddress mwa = new MemoryWriteAddress(REGION_CPU2);
		mwa.set( 0x8000, 0x9fff, galaga_sharedram_w );
		//mwa.set( 0x83ed, 0x83f3, hiscore );
		mwa.set( 0x6821, 0x6821, galaga_interrupt_enable_2_w );
		mwa.setMW( 0x0000, 0x1fff, MWA_ROM );
		return mwa;
	}

	private MemoryWriteAddress writemem_cpu3() {
		MemoryWriteAddress mwa = new MemoryWriteAddress(REGION_CPU3);
		mwa.set( 0x8000, 0x9fff, galaga_sharedram_w );
		//mwa.set( 0x83ed, 0x83f3, hiscore );
		mwa.set( 0x6800, 0x681f, pengo_sound_w );	//, &pengo_soundregs
		mwa.set( 0x6822, 0x6822, galaga_interrupt_enable_3_w );
		mwa.setMW( 0x0000, 0x1fff, MWA_ROM );
		return mwa;
	}

	private IOReadPort readport() {
		IOReadPort ior = new IOReadPort();
		return ior;
	}

	private IOWritePort writeport() {
		IOWritePort	iow = new IOWritePort();
		return iow;
	}

	private InputPort[] ipt_galaga() {
		      /* DSW0 */
		in[0].setDipName( 0x07, 0x07, DEF_STR[ Coinage ] );
		in[0].setDipSetting(    0x04, DEF_STR[ _4C_1C ] );
		in[0].setDipSetting(    0x02, DEF_STR[ _3C_1C ] );
		in[0].setDipSetting(    0x06, DEF_STR[ _2C_1C ] );
		in[0].setDipSetting(    0x07, DEF_STR[ _1C_1C ] );
		in[0].setDipSetting(    0x01, DEF_STR[ _2C_3C ] );
		in[0].setDipSetting(    0x03, DEF_STR[ _1C_2C ] );
		in[0].setDipSetting(    0x05, DEF_STR[ _1C_3C ] );
		in[0].setDipSetting(    0x00, DEF_STR[ Free_Play ] );
		/* TODO: bonus scores are different for 5 lives */
		in[0].setDipName( 0x38, 0x10, DEF_STR[ Bonus_Life ] );
		in[0].setDipSetting(    0x20, "20K 60K 60K" );
		in[0].setDipSetting(    0x18, "20K 60K" );
		in[0].setDipSetting(    0x10, "20K 70K 70K" );
		in[0].setDipSetting(    0x30, "20K 80K 80K" );
		in[0].setDipSetting(    0x38, "30K 80K" );
		in[0].setDipSetting(    0x08, "30K 100K 100K" );
		in[0].setDipSetting(    0x28, "30K 120K 120K" );
		in[0].setDipSetting(    0x00, "None" );
		in[0].setDipName( 0xc0, 0x80, DEF_STR[ Lives ] );
		in[0].setDipSetting(    0x00, "2" );
		in[0].setDipSetting(    0x80, "3" );
		in[0].setDipSetting(    0x40, "4" );
		in[0].setDipSetting(    0xc0, "5" );

		      /* DSW1 */
		in[1].setDipName( 0x01, 0x01, "2 Credits Game" );
		in[1].setDipSetting(    0x00, "1 Player" );
		in[1].setDipSetting(    0x01, "2 Players" );
		in[1].setDipName( 0x06, 0x06, DEF_STR[ Difficulty ] );
		in[1].setDipSetting(    0x06, "Easy" );
		in[1].setDipSetting(    0x00, "Medium" );
		in[1].setDipSetting(    0x02, "Hard" );
		in[1].setDipSetting(    0x04, "Hardest" );
		in[1].setDipName( 0x08, 0x00, DEF_STR[ Demo_Sounds ] );
		in[1].setDipSetting(    0x08, DEF_STR[ Off ] );
		in[1].setDipSetting(    0x00, DEF_STR[ On ] );
		in[1].setDipName( 0x10, 0x10, "Freeze" );
		in[1].setDipSetting(    0x10, DEF_STR[ Off ] );
		in[1].setDipSetting(    0x00, DEF_STR[ On ] );
		//in[1].setBit/*X*/(    0x20, 0x20, IPT_DipSWITCH_Name | IPF_CHEAT, "Rack Test", KEYCODE_F1, IP_JOY_NONE );
		in[1].setDipName( 0x20, 0x20, "Rack Test" );
		in[1].setDipSetting(    0x20, DEF_STR[ Off ] );
		in[1].setDipSetting(    0x00, DEF_STR[ On ] );
		in[1].setDipName( 0x40, 0x40, DEF_STR[ Unknown ] );
		in[1].setDipSetting(    0x40, DEF_STR[ Off ] );
		in[1].setDipSetting(    0x00, DEF_STR[ On ] );
		in[1].setDipName( 0x80, 0x80, DEF_STR[ Cabinet ] );
		in[1].setDipSetting(    0x80, DEF_STR[ Upright ] );
		in[1].setDipSetting(    0x00, DEF_STR[ Cocktail ] );

		      /* FAKE */
		/* The player inputs are not memory mapped, they are handled by an I/O chip.set */
		/* These fake input ports are read by galaga_customio_data_r(); */
		in[2].setBit( 0x01, IP_ACTIVE_LOW, IPT_UNUSED );
		in[2].setBit( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_2WAY );
		in[2].setBit( 0x04, IP_ACTIVE_LOW, IPT_UNUSED );
		in[2].setBit( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_2WAY );
		in[2].setBit/*Impulse*/( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1/*, 1*/ );
		//in[2].setBit/*X*/(0x20, IP_ACTIVE_LOW, IPT_BUTTON1/*, 0, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS*/ );
		in[2].setBit( 0xc0, IP_ACTIVE_LOW, IPT_UNUSED );

		      /* FAKE */
		in[3].setBit( 0x01, IP_ACTIVE_LOW, IPT_UNUSED );
		in[3].setBit( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_2WAY | IPF_COCKTAIL );
		in[3].setBit( 0x04, IP_ACTIVE_LOW, IPT_UNUSED );
		in[3].setBit( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_2WAY | IPF_COCKTAIL );
		in[3].setBit/*Impulse*/( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL/*, 1*/ );
		//in[3].setBit/*X*/(0x20, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL/*, 0, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS*/ );
		in[3].setBit( 0xc0, IP_ACTIVE_LOW, IPT_UNUSED );

		      /* FAKE */
		/* the button here is used to trigger the sound in the test screen */
		//in[4].setBitX(0x03, IP_ACTIVE_LOW, IPT_BUTTON1,     0, IP_KEY_DEFAULT, IP_JOY_DEFAULT );
		in[4].setBit/*Impulse*/( 0x04, IP_ACTIVE_LOW, IPT_START1/*, 1*/ );
		in[4].setBit/*Impulse*/( 0x08, IP_ACTIVE_LOW, IPT_START2/*, 1*/);
		in[4].setBit/*Impulse*/( 0x10, IP_ACTIVE_LOW, IPT_COIN1/*, 1*/);
		in[4].setBit/*Impulse*/( 0x20, IP_ACTIVE_LOW, IPT_COIN2/*, 1*/ );
		in[4].setBit/*Impulse*/( 0x40, IP_ACTIVE_LOW, IPT_COIN3/*, 1*/);
		in[4].setService( 0x80, IP_ACTIVE_LOW );
		return in;
	}

	private GfxLayout charlayout() {

		int[] pOffs = { 0, 4 };
		int[] xOffs = { 8*8+0, 8*8+1, 8*8+2, 8*8+3, 0, 1, 2, 3 };
		int[] yOffs = { 0*8, 1*8, 2*8, 3*8, 4*8, 5*8, 6*8, 7*8 };

		return new GfxLayout(
			8,8,			/* 8*8 characters */
			128,           /* 128 characters */
			2,             /* 2 bits per pixel */
			pOffs,
			xOffs,
			yOffs,
			16*8           /* every char takes 16 bytes */
		);
	}

	private GfxLayout spritelayout() {

		int[] pOffs = { 0, 4 };
		int[] xOffs = { 0, 1, 2, 3, 8*8, 8*8+1, 8*8+2, 8*8+3, 16*8+0, 16*8+1, 16*8+2, 16*8+3,
			24*8+0, 24*8+1, 24*8+2, 24*8+3 };
		int[] yOffs = { 0*8, 1*8, 2*8, 3*8, 4*8, 5*8, 6*8, 7*8,
			32*8, 33*8, 34*8, 35*8, 36*8, 37*8, 38*8, 39*8  };

		return new GfxLayout(
			16,16,          /* 16*16 sprites */
			128,            /* 128 sprites */
			2,              /* 2 bits per pixel */
			pOffs,
			xOffs,
			yOffs,
			64*8    /* every sprite takes 64 bytes */
		);
	}


	private GfxDecodeInfo[] gfxdecodeinfo() {
		GfxDecodeInfo gdi[] = new GfxDecodeInfo[2];
		gdi[0] = new GfxDecodeInfo( REGION_GFX1, 0, charlayout(),       0, 32 );
		gdi[1] = new GfxDecodeInfo( REGION_GFX2, 0, spritelayout(),  32*4, 32 );
		return gdi;
	}

	private boolean rom_galaga() {
		romLoader.setZip( "galaga" );

		romLoader.setMemory( REGION_CPU1 );
		romLoader.loadROM( "04m_g01.bin",  0x0000, 0x1000, 0xa3a0f743 );
		romLoader.loadROM( "04k_g02.bin",  0x1000, 0x1000, 0x43bb0d5c );
		romLoader.loadROM( "04j_g03.bin",  0x2000, 0x1000, 0x753ce503 );
		romLoader.loadROM( "04h_g04.bin",  0x3000, 0x1000, 0x83874442 );

		romLoader.setMemory( REGION_CPU2 );
		romLoader.loadROM( "04e_g05.bin",  0x0000, 0x1000, 0x3102fccd );

		romLoader.setMemory( REGION_CPU3 );
		romLoader.loadROM( "04d_g06.bin",  0x0000, 0x1000, 0x8995088d );

		romLoader.setMemory( REGION_GFX1 );
		romLoader.loadROM( "07m_g08.bin",  0x0000, 0x1000, 0x58b2f47c );

		romLoader.setMemory( REGION_GFX2 );
		romLoader.loadROM( "07e_g10.bin",  0x0000, 0x1000, 0xad447c80 );
		romLoader.loadROM( "07h_g09.bin",  0x1000, 0x1000, 0xdd6f1afc );

		romLoader.setMemory( REGION_PROMS );
		romLoader.loadROM( "5n.bin",       0x0000, 0x0020, 0x54603c6b );	/* palette */
		romLoader.loadROM( "2n.bin",       0x0020, 0x0100, 0xa547d33b );	/* char lookup table */
		romLoader.loadROM( "1c.bin",       0x0120, 0x0100, 0xb6f585fb );	/* sprite lookup table */
		romLoader.loadROM( "5c.bin",       0x0220, 0x0100, 0x8bd565f6 );	/* unknown */

		romLoader.setMemory( REGION_SOUND1 );
		romLoader.loadROM( "1d.bin",       0x0000, 0x0100, 0x86d92b24 );

		romLoader.loadZip(base_URL);;
		return true;
	}

}